// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfert.sql

package db

import (
	"context"
)

const createTransfert = `-- name: CreateTransfert :one
INSERT INTO transfers (
    from_account_id,
    to_account_id,
    amount
) VALUES (
  $1, $2, $3
)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransfertParams struct {
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
}

func (q *Queries) CreateTransfert(ctx context.Context, arg CreateTransfertParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfert, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfert = `-- name: GetTransfert :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfert(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfert, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfert = `-- name: ListTransfert :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE
  from_account_id = $1 OR
  to_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfertParams struct {
	FromAccountID int64
	ToAccountID   int64
	Limit         int32
	Offset        int32
}

func (q *Queries) ListTransfert(ctx context.Context, arg ListTransfertParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfert,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
